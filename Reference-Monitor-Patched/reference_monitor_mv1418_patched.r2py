"""
This security layer interposes on a textfile
and gives it open, close, read and write access.

However, a user should prevent any
1) Uppercase letters from being replaced by lowercase letters
2) Reads that mix upper and lower case

The security layer should also
1) Open file as few times as possible
2) Failing operations must be blocked without any I / O
"""

# This is just an example global variable.It stores a list of the calls the application makes.[[BR]]
BUFFER = []
# Create a lock to prevent race condition
lock = createlock()

class SecureFile():
	def __init__(self, privilegedfo, fileCache):
		self.file = privilegedfo
		self.fileCache = fileCache
		self.lock = createlock()

	def readat(self, bytes, offset):
		self.lock.acquire(bool(1))
		BUFFER.append("readat")
		
		hasLower = False
		hasUpper = False

		# Checks if the read would mix upper and lower
		for i in range(offset, offset+bytes):
			if (self.fileCache[i].isupper()):
				hasUpper = True
			elif (self.fileCache[i].islower()):
				hasLower = True
			
		# Blocks if read mixes upper and lower case letters
		if (hasLower is True and hasUpper is True) :
			self.lock.release()
			raise ValueError("Error: Cannot Execute Reads that Mix Upper and Lower Cases")
			
		retval =  self.file.readat(bytes, offset)
		self.lock.release()
		return retval
			
	def writeat(self, data, offset):
		self.lock.acquire(bool(1))
		BUFFER.append("writeat")

		for i in range(0, len(data)): 
			#Checks if the character is uppercase
			if (data[i].islower() and self.fileCache[offset + i].isupper()):
				self.lock.release()
				raise ValueError("Error: Cannot Overwrite Uppercase Character with a Lowercase Character")
			else : 
				# Change Cache
				self.fileCache[offset + i] = data[i]
				retval = self.file.writeat(data, offset)
				self.lock.release()
				return retval

	def close(self):
		BUFFER.append("close")
		return self.file.close()


def secure_openfile(filename, create):
	BUFFER.append("openfile")
    # Open a file from the layer below(likely the sandbox)
	privilegedfo = openfile(filename, create)

	# Store Character History
	fileCache = dict()
	line = privilegedfo.readat(None, 0)
	for i in range(0, len(line)):
		fileCache[i] = line[i]
			
	return SecureFile(privilegedfo, fileCache)

# You can ignore the code below here.It just sets of the security layer so that the application calls it instead of the original API functions.
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"
OBJC = "objc"

sec_file_def = {
	"obj-type": SecureFile,
	"name": "SecureFile",
	"readat": {
		TYPE: FUNC,
		ARGS: ((int, long, type(None)), (int, long)),
		EXCP: Exception,
		RETURN: str,
		TARGET: SecureFile.readat
	},
	"writeat": {
		TYPE: FUNC,
		ARGS: (str, (int, long)),
		EXCP: Exception,
		RETURN: (None),
		TARGET: SecureFile.writeat
	},
	"close": {
		TYPE: FUNC,
		ARGS: None,
		EXCP: None,
		RETURN: (bool, type(None)),
		TARGET: SecureFile.close
	}
}

CHILD_CONTEXT_DEF["openfile"] = {
	TYPE: OBJC,
	ARGS: (str, bool),
	EXCP: Exception,
	RETURN: sec_file_def,
	TARGET: secure_openfile
}

secure_dispatch_module()